-- use classicmodels;

-- Soal 1
-- SELECT customers.customerName as 'Nama Pelanggan', 
-- SUM(amount) as 'Total Belanja', customers.creditLimit as 'Batas Kredit', (SUM(amount)-creditLimit) as 'Selisih'
-- FROM customers
-- inner join payments
-- on customers.customerNumber = payments.customerNumber
-- group by customerName
-- having sum(amount) > customers.creditLimit order by (SUM(amount)-creditLimit)  DESC LIMIT 5;

-- Soal 2
-- SELECT CONCAT(c.customerName ," : ", c.contactFirstName," ", c.contactLastName, "@", c.addressLine1) AS Pelanggan, 
-- SUM(od.quantityOrdered) AS `Jumlah Orderan`
-- FROM customers c
-- JOIN orders o
-- USING (customerNumber)
-- JOIN orderdetails od
-- USING (orderNumber)
-- GROUP BY c.customerName
-- ORDER BY `Jumlah Orderan` DESC LIMIT 1;

-- Soal 3
-- SELECT CONCAT((MONTHNAME(paymentDate)), " ",YEAR(paymentDate)) as 'hari pembayaran', COUNT(customers.customerName) as 'jumlah pelanggan', 
-- GROUP_CONCAT(customerName ORDER BY customerName ASC SEPARATOR "; ") as 'list pelanggan', SUM(payments.amount) as 'jumlah pembayaran'
-- FROM customers
-- INNER JOIN payments 
-- ON customers.customerNumber = payments.customerNumber
-- WHERE MONTH(paymentdate) = 2
-- GROUP BY YEAR(paymentDate) ORDER BY SUM(payments.amount)DESC;

-- Soal 4
-- SELECT UPPER(p.productName) as 'nama produk' , COUNT(o.customerNumber) as 'jumlah diorder', 
-- GROUP_CONCAT(orderDate) as 'waktu orderan', p.buyPrice as 'harga beli', od.priceEach as 'harga jual', 
-- CONCAT((SUM(od.quantityOrdered *od.priceEach)), "-", SUM(od.quantityOrdered * p.buyprice), "=", (SUM(od.quantityOrdered * od.priceEach)) - SUM(od.quantityOrdered * p.buyprice))
-- AS "pendapatan - modal = keuntungan"
-- FROM products p
-- JOIN orderdetails od
-- USING (productCode)
-- JOIN orders o
-- USING (orderNumber)
-- WHERE p.productName = '2001 Ferrari Enzo'
-- GROUP BY priceEach
-- HAVING (SUM(od.quantityOrdered * od.priceEach)) - SUM(od.quantityOrdered * p.buyprice) > 5000 
-- ORDER BY (SUM(od.quantityOrdered * od.priceEach)) - SUM(od.quantityOrdered * p.buyprice)DESC;

-- Soal 5
-- SELECT o.addressLine1 AS 'Alamat', concat(LEFT(o.phone, LENGTH(o.phone)-6), '* ****') AS 'Nomor Telp',
-- COUNT(DISTINCT e.employeeNumber) AS 'Jumlah Karyawan' , COUNT(DISTINCT c.customerName) AS 'Jumlah Pelanggan', round(AVG(amount), 2) AS 'Rata-rata Penghasilan'
-- from offices o
-- INNER JOIN employees e
-- ON e.officeCode = o.officeCode
-- INNER JOIN customers AS c
-- ON c.salesRepEmployeeNumber = e.employeeNumber
-- INNER JOIN payments AS p
-- ON c.customerNumber = p.customerNumber
-- GROUP BY o.officeCode
-- ORDER BY o.phone;